#!/usr/bin/env node
"use strict";

function Continue(resolver) {
    var todo = [];
    var result = null;
    var C = function(then) {
        var CH = Continue( function (resolve) {
            todo.push(function() {
                try {
                    var next_result = then.apply(null,arguments);
                    if ( typeof(newVal) !== 'undefined' ) {
                        resolve(null,next_result);
                    }
                    else {
                        resolve.apply(null,arguments);
                    }
                }
                catch (x) {
                    resolve(x);
                }
            });
        });
        if (result) { process.nextTick(result) }
        return CH;
    };
    var resolve = function () {
        if (result) { throw new Error("Continuable already resolved") }
        var a = arguments;
        (result = function(){ todo.forEach(function(t){ t.apply(null,a) }); todo=[] })();
    };
    resolve.withoutErrors = function (v) { this.resolve(null,v) }
    resolver( resolve );
    return C;
}

var def = function(value,defVal) {
    return typeof(value) !== 'undefined' ? value : defVal;
};

function Promise() {
    var P = {deferred:{}};
    var C = Continue(function (resolve) {
        P.resolve = function (value) { 
            if ( typeof(value)==='object' && typeof(value.then)==='function' ) {
                value.then(P.resolve,P.reject);
            }
            else {
                resolve(null,value);
            }
        };
        P.resolve.withCallback = function(e,v) {
            if (e) { P.reject(e) } else { P.resolve(v) }
        };
        P.reject = function(value) {
            resolve(value);
        };
    });

    P.deferred.then = function(then,error) {
        var PC = Promise();
        error = error || function (e) { return e };
        C(function (e,v) {
            try {
                if (e) {
                    PC.reject(def( error(e), e ));
                }
                else {
                    PC.resolve(def( then(v), v ));
                }
            }
            catch (x) {
                PC.reject(x);
            }
        });
        return PC.deferred;
    };
    return P;
}

var foo = Continue( function (resolve) {
    resolve(new Error("BOOM"),"THIS1");
});
foo(function(e,v) { console.log("CONTINUE EARLY RESOLVE1:",e,v); if (e) throw e; return v; })
   (function(e,v) { console.log("CONTINUE EARLY RESOLVE2:",e,v); if (e) throw e; return v; })
   (function(e,v) { console.log("CONTINUE EARLY RESOLVE3:",e,v) });

var bar = Continue( function (resolve) { process.nextTick(function(){ resolve(null,"THIS2") }) } );
bar(function(e,v) { console.log("CONTINUE LATE RESOLVE1:",e,v) });
bar(function(e,v) { console.log("CONTINUE LATE RESOLVE2:",e,v) });

var promise = Promise();
function pstart() {
   return promise.deferred;
}

function ok() {
    var N = Promise();
    promise.resolve(N.deferred);
    N.resolve("yay");
}

function nok() {
    promise.reject("boo");
}

var P = pstart();

var P2 = P.then(function (m) { console.log("PROMISE1:",m); throw new Error(m) }, function (m) { console.log("PROMISE1 (err):",m) })
          .then(function (m) { console.log("PROMISE2:",m) }, function (m) { console.log("PROMISE2: (err)",m) });

ok();

P.then(function (m) { console.log("PROMISE3:",m) }, function (m) { console.log("PROMISE3: (err)",m) });

P2.then(function (m) { console.log("PROMISE4:",m) }, function (m) { console.log("PROMISE4: (err)",m) });
