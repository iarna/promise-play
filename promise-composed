#!/usr/bin/env node
"use strict";

function Continue() {
    var todo = [];
    var result = null;
    var C = function(then) {
        var CH = Continue();
        todo.push(function(e,v) {
            var newErr;
            var newVal;
            try {
                newVal = then(e,v);
                if ( typeof(newVal) !== 'undefined' ) {
                    CH.resolve(null,newVal);
                }
                else {
                    CH.resolve(e,v);
                }
            }
            catch (x) {
                CH.resolve(x);
            }
        });
        if (result) { process.nextTick(result) }
        return CH;
    };
    C.resolve = function (e,v) {
        if (result) { throw new Error("Continuable already resolved") }
        (result = function(){ todo.forEach(function(t){ t(e,v) }); todo=[] })();
    };
    C.resolve.withoutErrors = function (v) { C.resolve(null,v) }
    return C;
}

var def = function(value,defVal) {
    return typeof(value) !== 'undefined' ? value : defVal;
};

function Promise() {
    var P = {deferred:{}};
    var C = Continue();
    P.deferred.then = function(then,error) {
        var PC = Promise();
        error = error || function (e) { return e };
        C(function (e,v) {
            try {
                if (e) {
                    PC.reject(def( error(e), e ));
                }
                else {
                    PC.resolve(def( then(v), v ));
                }
            }
            catch (x) {
                PC.reject(x);
            }
        });
        return PC.deferred;
    };
    P.resolve = function (value) { 
        if ( typeof(value)==='object' && typeof(value.then)==='function' ) {
            value.then(P.resolve,P.reject);
        }
        else {
            C.resolve(null,value);
        }
    };
    P.resolve.withCallback = function(e,v) {
        if (e) { P.reject(e) } else { P.resolve(v) }
    };
    P.reject = function(value) {
        C.resolve(value);
    };
    return P;
}

process.nextTick(function() {

    var foo = Continue();
    foo.resolve(new Error("BOOM"),"THIS1");
    foo(function(e,v) { console.log("CONTINUE EARLY RESOLVE1:",e,v); if (e) throw e; return v; })
       (function(e,v) { console.log("CONTINUE EARLY RESOLVE2:",e,v); if (e) throw e; return v; })
       (function(e,v) { console.log("CONTINUE EARLY RESOLVE3:",e,v) });

});

process.nextTick(function() {

   var bar = Continue();
   bar(function(e,v) { console.log("CONTINUE LATE RESOLVE1:",e,v) });
   bar(function(e,v) { console.log("CONTINUE LATE RESOLVE2:",e,v) });
   bar.resolve(null,"THIS2");

});

process.nextTick(function() {

    var promise = Promise();
    function pstart() {
       return promise.deferred;
    }

    function ok() {
        var N = Promise();
        promise.resolve(N.deferred);
        N.resolve("yay");
    }

    function nok() {
        promise.reject("boo");
    }

    var P = pstart();

    var P2 = P.then(function (m) { console.log("PROMISE1:",m); throw new Error(m) }, function (m) { console.log("PROMISE1 (err):",m) })
              .then(function (m) { console.log("PROMISE2:",m) }, function (m) { console.log("PROMISE2: (err)",m) });

    ok();

    P.then(function (m) { console.log("PROMISE3:",m) }, function (m) { console.log("PROMISE3: (err)",m) });

    P2.then(function (m) { console.log("PROMISE4:",m) }, function (m) { console.log("PROMISE4: (err)",m) });

});

