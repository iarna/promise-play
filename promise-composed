#!/usr/bin/env node
"use strict";

var continuableid = 0;
function Continue(resolvecb) {
    var todo = [];
    var result = null;

    var resolve = function () {
        if (result) { throw new Error("Continuable already resolved") }
        var A = arguments;
        if ( A.length == 1 && typeof(A[0])==='function' ) {
            A[0]( resolve );
        }
        else {
            (result = function(){ todo.forEach(function(T){ T.apply(null,A) }); todo=[] })();
        }
    };
    resolve.withoutErrors = function () {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(null);
        this.apply(null, [null,V]);
    };
    resolvecb( resolve );

    var continuable = function(then) {
        if (result) { process.nextTick(result) }
        return Continue( function (chained_resolve) {
            todo.push(function() {
                var next_result;
                try {
                    var value = then.apply(null,arguments);
                    if ( typeof(value) === 'undefined' ) {
                        next_result = arguments;
                    }
                    else {
                        next_result = [null,value];
                    }
                }
                catch (X) {
                    next_result = [X];
                }
                chained_resolve.apply(null, next_result);
            });
        });
    };
    continuable.then = function (success,failure) {
        return continuable(function (E,V) {
            if (E) {
                if (failure) {
                    var result = failure(E);
                    if (typeof(result)!=='undefined') { return result }
                }
                throw E;
            }
            return success(V);
        });
    };
    return continuable;
}

var Promise = Continue;

function report() {
    var args = Array.prototype.slice.call(arguments);
    args.unshift("%");
    console.log.apply(null,args);
}

var foo = Continue( function (resolve) {
    resolve(new Error("BOOM"),"THIS1");
    //resolve(null,"THIS1");
});

foo(function(E,V) { report("CONTINUE EARLY RESOLVE1:",E,V);})
   (function(E,V) { report("CONTINUE EARLY RESOLVE2:",E,V); if (!E) return V+ " FOR FOO"; })
   (function(E,V) { report("CONTINUE EARLY RESOLVE3:",E,V) });

var bar = Continue( function (resolve) { process.nextTick(function(){ resolve(null,"THIS2") }) } );
bar(function(E,V) { report("CONTINUE LATE RESOLVE1:",E,V) });
bar(function(E,V) { report("CONTINUE LATE RESOLVE2:",E,V) });
var baz = Continue(function (resolve) { resolve(null,"ALL DONE") });
var bark = Continue(function (resolve) { resolve(baz) });
bark(function(E,V) { report("CHAINED RESOLVE:",E,V) });

var ok;
var nok;
var presolve;
var promise = Promise(function (resolve) { presolve = resolve });
function ok() {
    var nresolve;
    var N = Promise(function (resolve) { nresolve = resolve });
    //nresolve(new Error("BAD"));
    nresolve(null,"NYAY");
    presolve(N);
    //presolve(null,"yay");
}

function nok() {
    presolve("boo");
}

ok();
var P2 = promise.then(function (M) { report("PROMISE1:",M); throw new Error("Boo") }, function (M) { report("PROMISE1 (err):",M) })
                .then(function (M) { report("PROMISE2:",M) }, function (M) { report("PROMISE2: (err)",M) });

promise.then(function (M) { report("PROMISE3:",M) }, function (M) { report("PROMISE3: (err)",M) })
       .then(function (M) { report("PROMISE4:",M) }, function (M) { report("PROMISE4: (err)",M) });

P2.then(function (M) { report("PROMISE5:",M) }, function (M) { report("PROMISE5: (err)",M) });
